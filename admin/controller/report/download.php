<?php
/**
Download
**/

class ControllerReportDownload extends Controller {
	private $error = array();
	/**
	* Will handle PHPExcel instance object
	*
	* @var object
	*/
	private $objPHPExcel;

	/**
	* Current order on the loop when exporting all
	*
	* @var integer
	*/
	private $mainCounter;

	/**
	* Data filter : start date
	*
	* @var string
	*/
	private $filter_date_start;

	/**
	* Data filter : end date
	*
	* @var string
	*/
	private $filter_date_end;

	/**
	* Data filter : status
	*
	* @var integer
	*/
	private $filter_order_status_id;
	public function export()
	{
		require_once DIR_SYSTEM . 'library/excel/PHPExcel.php';
		require_once DIR_SYSTEM . 'library/excel/PHPExcel/IOFactory.php';

		$this->objPHPExcel = new PHPExcel();
		$this->mainCounter = 1;
		print_r("TEST");
		// Export one
		/*
		if (isset($this->request->get['order_id']))
		{

			$order_id = $this->request->get['order_id'];
			$this->createExcelWorksheet($order_id);
			$this->getDownloadXlsFile($order_id);
		}*/

		// Export all
		//if (isset($this->request->get['order']))
		//{


			$this->load->model('sale/download');
			$this->setFilters();

			$data = array(
				'filter_date_added'      => $this->filter_date_start,
				'filter_date_modified'        => $this->filter_date_end,
				'filter_order_status_id' => $this->filter_order_status_id
			);

			//$result = $this->model_sale_download->getOrders($data);
			
			
			
			$this->createExcelWorksheet($data);
			/*
			foreach ($result as $res)
			{
				$this->createExcelWorksheet($res['order_id']);
				$this->mainCounter++;
			}
			*/
			$this->getDownloadXlsFile('all');
		//}
	}


	/**
	* Set filter passed through URL
	* Use default values if filters not defined yet
	*
	* @return void
	*/
	protected function setFilters()
	{
		if (isset($this->request->get['filter_date_added']))
		{
			$this->filter_date_start = $this->request->get['filter_date_added'];
		}
		else
		{
			$this->filter_date_start = date('Y-m-d', strtotime(date('Y') . '-' . date('m') . '-01'));
		}

		if (isset($this->request->get['filter_date_modified']))
		{
			$this->filter_date_end = $this->request->get['filter_date_modified'];
		}
		else
		{
			$this->filter_date_end = date('Y-m-d');
		}

		if (isset($this->request->get['filter_order_status_id']))
		{
			$this->filter_order_status_id = $this->request->get['filter_order_status'];
		}
		else
		{
			$this->filter_order_status_id = 0;
		}
	}


	public function getDownloadXlsFile($order_id = null){
		// Setup headers
		header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
		header('Content-Disposition: attachment;filename="export-order-'.$order_id.'.xlsx"');
		header('Cache-Control: max-age=0');
		//header('Content-type: application/vnd.ms-excel');
		

		// Generate file
		$objWriter = PHPExcel_IOFactory::createWriter($this->objPHPExcel, 'Excel2007');
		ob_end_clean();
		$objWriter->save('php://output');
		
		exit();
	}



	/**
	* Create a list of orders (one or many order)
	* If an order has 3 products, 3 lines will be create with all the info
	*
	* @param  integer  order_id
	* @return void
	*/
	protected function createExcelWorksheet($order_id)
	{
		$this->load->language('sale/download');
		$this->load->model('sale/download');
		$this->load->model('sale/order');
		print_r($order_id);
		$result = $this->model_sale_download->getOrders($order_id);
		
		//$totals = $this->model_sale_order->getOrderTotals($order_id);
		$vat = array(
			'title' => '',
			'text'  => ''
		);

		$x=0;
		$counter=2;
		$this->mainCounter = 1;
		// Build array
		$this->objPHPExcel->getProperties()->setCreator('Opencart Excel Export')
					->setLastModifiedBy('Opencart Excel Export')
					->setTitle('Office 2007 XLSX')
					->setSubject('Office 2007 XLSX')
					->setDescription('Document for Office 2007 XLSX, generated by Opencart Excel Export')
					->setKeywords('office 2007 excel')
					->setCategory('Reporting');

				$this->objPHPExcel->setActiveSheetIndex(0);
				$this->objPHPExcel->getActiveSheet()->setCellValue('A' . $this->mainCounter, "Date");
				$this->objPHPExcel->getActiveSheet()->setCellValue('B' . $this->mainCounter, "Order Number");
				$this->objPHPExcel->getActiveSheet()->setCellValue('C' . $this->mainCounter, "Name");
				$this->objPHPExcel->getActiveSheet()->setCellValue('D' . $this->mainCounter, "Contact Number");
				$this->objPHPExcel->getActiveSheet()->setCellValue('E' . $this->mainCounter, "Email Address");
				$this->objPHPExcel->getActiveSheet()->setCellValue('F' . $this->mainCounter, "Recipient's Name");
				$this->objPHPExcel->getActiveSheet()->setCellValue('G' . $this->mainCounter, "Recipient's Contact Number");
				$this->objPHPExcel->getActiveSheet()->setCellValue('H' . $this->mainCounter, "Billing Address");
				$this->objPHPExcel->getActiveSheet()->setCellValue('I' . $this->mainCounter, "Shipping Address");
				$this->objPHPExcel->getActiveSheet()->setCellValue('J' . $this->mainCounter, "City");
				$this->objPHPExcel->getActiveSheet()->setCellValue('K' . $this->mainCounter, "Purchased Details");
				$this->objPHPExcel->getActiveSheet()->setCellValue('L' . $this->mainCounter, "Status");
				$this->objPHPExcel->getActiveSheet()->setCellValue('M' . $this->mainCounter, "No of items");
				$this->objPHPExcel->getActiveSheet()->setCellValue('N' . $this->mainCounter, "Product Cost");
				$this->objPHPExcel->getActiveSheet()->setCellValue('O' . $this->mainCounter, "Shipping Fee");
				$this->objPHPExcel->getActiveSheet()->setCellValue('P' . $this->mainCounter, "Admin Fee");
				$this->objPHPExcel->getActiveSheet()->setCellValue('Q' . $this->mainCounter, "Total Net Amount");
				$this->objPHPExcel->getActiveSheet()->setCellValue('R' . $this->mainCounter, "Payment Facility");
				$this->objPHPExcel->getActiveSheet()->setCellValue('S' . $this->mainCounter, "Date of Payment");
				
		foreach ($result as $res)
		{
			
			// Invoice related informations
			$invoice = '';

			if (isset($res['invoice_no']))
			{
				$invoice = $res['invoice_prefix'] . $res['invoice_no'];
			}

		
			$getInfo = $this->model_sale_download->getOrder($res['order_id']);
			$products = $this->model_sale_download->getProductListFromOrder($getInfo['order_id']);
			//foreach($getInfos as $getInfo){
			//echo '<pre>';
			//print_r($getInfo);
			//echo '</pre>';
			
			$data['orders'][] = array(				
				'order_id'           => $getInfo['order_id'],
				'customer'           => $getInfo['firstname'] . ' ' . $getInfo['lastname'],
				'customer_company'   => $getInfo['shipping_company'],
				'email'              => $getInfo['email'],
				'telephone'          => $getInfo['telephone'],				
				//'total'              => $this->currency->format($res['total'], $res['currency_code'], $res['currency_value']),
				'total'				=> $res['total'],
				'date_added'         => date($this->language->get('date_format_short'), strtotime($res['date_added'])),
				'billing_address'	=>	$getInfo['payment_address_1']." ".$getInfo['payment_address_2'].", ".$getInfo['payment_city']." ".$getInfo['payment_zone'].", ".$getInfo['payment_country']." ".$getInfo['payment_postcode'],
				'shipping_address'		=> $getInfo['shipping_address_1']." ".$getInfo['shipping_address_2'].", ".$getInfo['shipping_city']." ".$getInfo['shipping_zone'].", ".$getInfo['shipping_country']." ".$getInfo['shipping_postcode'],
				'city'				=>	$getInfo['shipping_city'],
				'order_status'		=> $getInfo['order_status'],
				'payment_method'	=>	$getInfo['payment_method'],
				'dated_payment'		=>	$this->currency->format($res['total'], $res['currency_code'], $res['currency_value']),
				'shipping_firstname' => $getInfo['shipping_firstname'],
				'shipping_lastname'  => $getInfo['shipping_lastname'],
				'shipping_address_1' => $getInfo['shipping_address_1'],
				'shipping_address_2' => $getInfo['shipping_address_2'],
				'shipping_city'      => $getInfo['shipping_city'],
				'shipping_postcode'  => $getInfo['shipping_postcode'],
				'shipping_zone'      => $getInfo['shipping_zone'],
				'shipping_country'   => $getInfo['shipping_country'],
				'shipping_method'    => $getInfo['shipping_method']
			);
			//}
			

			//$counter  = $this->mainCounter+1;

			
			$product_list = array();
			$product_quantity = array();
			foreach ($products as $prod)
			{
				//echo '<pre>';
				//	print_r($counter);
				//echo '</pre>';
				
				if($prod['order_id'] == $getInfo['order_id']){
					
					$product_list['prod'][] = array(
						'quantity'	=> $prod['quantity'],
						'name'		=>	$prod['name']
						);
					
					$countProd = count($product_list['prod']);
					$productDes = "";
					$productQuantity = 0;
					for($i = 0; $i<$countProd; $i++){
						$check = $countProd - 1;
						if($check == $i){
							$productDes .= $product_list['prod'][$i]['name'];
						}else{
							$productDes .= $product_list['prod'][$i]['name'].",";
						}
						$productQuantity = $productQuantity + $product_list['prod'][$i]['quantity'];
					}
					
					
				}

			}
			
			
			/*

				$option_data = array();

				$options = $this->model_sale_order->getOrderOptions($order_id, $prod['order_product_id']);

				if (!empty($options))
				{
					foreach ($options as $option)
					{
						if ($option['name'] == 'Size')
						{
							$option_data['Size'][] = array(
								'name'  => $option['name'],
								'value' => $option['value'],
								'type'  => $option['type']
							);
						}
						if ($option['name'] == 'Color')
						{
							$option_data['Color'][] = array(
								'name'  => $option['name'],
								'value' => $option['value'],
								'type'  => $option['type']
							);
						}
					}
				}

				$color = 'N/A';
				$size  = 'N/A';

				if ( !empty($option_data['Color']) )
				{
					$color = $option_data['Color'][0]['value'];
				}
				if ( !empty($option_data['Size']) )
				{
					$size = $option_data['Size'][0]['value'];
				}
				$counter++;
				$this->mainCounter++;
				
			}
			*/
			$this->objPHPExcel->getActiveSheet()->setCellValue('A' . $counter, $data['orders'][$x]['date_added']);
			$this->objPHPExcel->getActiveSheet()->setCellValue('B' . $counter, $data['orders'][$x]['order_id']);
			
			
			$this->objPHPExcel->getActiveSheet()->setCellValue('C' . $counter, $data['orders'][$x]['customer']);
			$this->objPHPExcel->getActiveSheet()->setCellValue('D' . $counter, $data['orders'][$x]['telephone']);
			$this->objPHPExcel->getActiveSheet()->setCellValue('E' . $counter, $data['orders'][$x]['email']);
			$this->objPHPExcel->getActiveSheet()->setCellValue('F' . $counter, $data['orders'][$x]['customer']);
			$this->objPHPExcel->getActiveSheet()->setCellValue('G' . $counter, $data['orders'][$x]['telephone']);
			$this->objPHPExcel->getActiveSheet()->setCellValue('H' . $counter, $data['orders'][$x]['billing_address']);
			$this->objPHPExcel->getActiveSheet()->setCellValue('I' . $counter, $data['orders'][$x]['shipping_address']);
			$this->objPHPExcel->getActiveSheet()->setCellValue('J' . $counter, $data['orders'][$x]['city']);
			$this->objPHPExcel->getActiveSheet()->setCellValue('K' . $counter, $productDes);
			$this->objPHPExcel->getActiveSheet()->setCellValue('L' . $counter, $data['orders'][$x]['order_status']);
			$this->objPHPExcel->getActiveSheet()->setCellValue('M' . $counter, $productQuantity);

			$this->objPHPExcel->getActiveSheet()->setCellValue('N' . $counter, $data['orders'][$x]['total']);
			$this->objPHPExcel->getActiveSheet()->setCellValue('O' . $counter, "");
			$this->objPHPExcel->getActiveSheet()->setCellValue('P' . $counter, "");
			$this->objPHPExcel->getActiveSheet()->setCellValue('Q' . $counter, "");
			$this->objPHPExcel->getActiveSheet()->setCellValue('R' . $counter, $data['orders'][$x]['payment_method']);


			$this->objPHPExcel->getActiveSheet()->setCellValue('S' . $counter, $data['orders'][$x]['date_added']);
		
			
			
			$x++;
			$this->mainCounter++;
			$counter++;
		}
		// Set thin black border outline around column
		$styleThinBlackBorderOutline = array(
			'borders' => array(
				'outline' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN,
					'color' => array('argb' => 'FF000000'),
				),
			),
		);
		$sum = $counter+5;
		$this->objPHPExcel->getActiveSheet()->setCellValue('M'.$sum,'TOTAL');
		$this->objPHPExcel->getActiveSheet()->setCellValue('N'.$sum,'=SUM(N1:N'.$counter.')');
		$this->objPHPExcel->getActiveSheet()->getStyle('A'.$sum.':W'.$sum.'')->applyFromArray($styleThinBlackBorderOutline);
		$this->objPHPExcel->getActiveSheet()->getStyle('A'.$sum.':W'.$sum.'')->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID);
		$this->objPHPExcel->getActiveSheet()->getStyle('A'.$sum.':W'.$sum.'')->getFill()->getStartColor()->setARGB('094d8a');
		// Set the style of heading cells
		
		$this->objPHPExcel->getActiveSheet()->getStyle('A1:W1')->applyFromArray($styleThinBlackBorderOutline);
		$this->objPHPExcel->getActiveSheet()->getStyle('A1:W1')->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID);
		$this->objPHPExcel->getActiveSheet()->getStyle('A1:W1')->getFill()->getStartColor()->setARGB('008443');
		
		$columns = array('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W');
		foreach ($columns as $col)
		{
			$this->objPHPExcel->getActiveSheet()->getColumnDimension($col)->setAutoSize(true);
			$this->objPHPExcel->getActiveSheet()->getStyle($col)->getFont()->setSize(11);
			$this->objPHPExcel->getActiveSheet()->getStyle($col)->getFont()->setBold(false);
			$this->objPHPExcel->getActiveSheet()->getStyle($col)->getFont()->getColor()->setARGB(PHPExcel_Style_Color::COLOR_BLACK);
			$this->objPHPExcel->getActiveSheet()->getStyle($col)->getAlignment()->setShrinkToFit(true);
		}

		unset($data['orders']);
	}
}